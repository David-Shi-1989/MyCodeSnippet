{"./":{"url":"./","title":"介绍","keywords":"","body":"Introduction Copyright © shiwang.wang 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-02-20 11:17:46 "},"webpack/":{"url":"webpack/","title":"Webpack教程","keywords":"","body":"Webpack教程 教程环境 node12.20.2webpack5.23.0webpack-cli4.5.0 官网文档 Copyright © shiwang.wang 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-02-20 14:44:49 "},"webpack/1_HelloWebpack.html":{"url":"webpack/1_HelloWebpack.html","title":"Hello Webpack","keywords":"","body":"Hello Webpack 文件列表： 总共4个文件： index.html 1.3.3 使用Webpack main.js const show = require('./show.js') show('Webpack') show.js function show (content) { document.getElementById('app').innerText = 'Hellow,' + content } module.exports = show webpack.config.js const path = require('path') module.exports = { mode: 'development', entry: path.resolve(__dirname, 'main.js'), output: { filename: 'bundle.js', path: path.resolve(__dirname, 'dist') } } Webpack build 运行命令： webpack --config webpack.config.js 运行成功后，会生成dist目录，该目录下生成新文件bundle.js，打开index.html后，效果如下： Copyright © shiwang.wang 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-02-20 14:36:25 "},"webpack/2_CssLoader.html":{"url":"webpack/2_CssLoader.html","title":"Css Loader","keywords":"","body":"Css Loader 基于上个例子，我们加一点css样式。 修改文件 增加style.css #app { font-size: 25px; font-weight: bolder; color: blue; } 修改main.js require('./style.css') const show = require('./show.js') show('Webpack') 增加第1行，引入css文件。注意这里是通过js代码引入的，而不是html文件中通过link引入。 修改webpack.config.js const path = require('path') module.exports = { mode: 'development', entry: path.resolve(__dirname, 'main.js'), output: { filename: 'bundle.js', path: path.resolve(__dirname, 'dist') }, module: { rules: [ { test: /\\.css$/, use: ['style-loader', 'css-loader'] } ] } } 其中9-16行，为新加配置。主要作用是为css文件指定了Loader，因为webpack只能解析js文件，所以我们要使用style-loader和css-loader对css文件解析。同时别忘了安装这2个插件，安装命令： npm init npm install -D style-loader css-loader Webpack build 运行命令： webpack --config webpack.config.js 运行成功后，会生成dist目录，该目录下生成新文件bundle.js，打开index.html后，效果如下： 打开bundle.js文件，我们可以发现，css代码是在js文件中，并没有生成新的css文件。 Copyright © shiwang.wang 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-02-20 14:45:57 "},"webpack/3_Plugin.html":{"url":"webpack/3_Plugin.html","title":"Plugin","keywords":"","body":"Plugin 基于上个例子，我们把css样式从js代码中剥离出来。最终效果是，打包出来后为2个文件，js和css代码分开，通过mini-css-extract-plugin插件实现。 修改文件 修改index.html 1.3.5 使用Plugin 新增第7行代码，至于main后面的hash如何确定？最后会介绍。 修改webpack.config.js const path = require('path') const MiniCssExtractPlugin = require('mini-css-extract-plugin') module.exports = { mode: 'development', entry: path.resolve(__dirname, 'main.js'), output: { filename: 'bundle.js', path: path.resolve(__dirname, 'dist') }, module: { rules: [ { test: /\\.css$/i, use: [MiniCssExtractPlugin.loader, 'css-loader'], } ] }, plugins: [ new MiniCssExtractPlugin({ filename: `[name].[contenthash].css` }) ] } 引入mini-css-extract-plugin插件，将css代码剥离出来。 别忘了安装依赖 npm install -D mini-css-extract-plugin Webpack build 运行命令： webpack --config webpack.config.js 运行成功后，会生成dist目录，该目录下生成新文件bundle.js和main.141bbd3b8e8be1b45fb5.css，打开index.html后，效果和上一个例子一致，说明css样式生效。 FAQ css文件名的问题 第一步中index.html中css文件名的问题，我们尝试以下2种修改： 将css文件名设为定值 webpack.config.js中filename直接改为style.css。 打包后，发现css文件名生效，此时记得修改index.html中css文件名，此种方法也可生效，但不推荐。 不修改文件名，修改css内容 我们修改style.css中的内容，任意修改，增加，删除内容。 重新打包后，发现文件名后缀hash变化了。 因为我们定义的文件名是基于文件内容的，所以一旦css文件发生变化，文件名也会变化。所以本篇一开始定义的带hash的filename并不好。因为事先我们并不知道文件名中的hash，并且文件内容一旦发生变化文件名也会变化。 filename: `[name].[contenthash].css` 那我们把后缀hash去除，试试看。 filename: `[name].css` 结果是打包生成了main.css。同时修改index.html的引用，可生效，但不推荐。 为什么要给文件名加上hash？ 为了解决引用缓存的问题。所以上面的2种解决办法不推荐，会有缓存问题。 如何解决hash文件名引入的问题？ 使用html-webpack-plugin插件，见下篇。 参考文档 npm extract-text-webpack-plugin webpack的extract-text-webpack-plugin插件 Copyright © shiwang.wang 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-02-20 16:41:50 "},"webpack/4_html-webpack-plugin.html":{"url":"webpack/4_html-webpack-plugin.html","title":"html-webpack-plugin","keywords":"","body":"html-webpack-plugin 该插件的基本作用就是生成html文件。原理很简单： 将 webpack中entry配置的相关入口chunk 和 extract-text-webpack-plugin抽取的css样式 插入到该插件提供的template或者templateContent配置项指定的内容基础上生成一个html文件，具体插入方式是将样式link插入到head元素中，script插入到head或者body中。 修改文件 修改index.html文件，去除掉对js和css文件的引用，让插件自动完成： 1.3.5 使用Plugin - html-webpack-plugin 最重要的是修改webpack.config.js，引入html-webpack-plugin插件。 const path = require('path') const MiniCssExtractPlugin = require('mini-css-extract-plugin') const HtmlWebpackPlugin = require('html-webpack-plugin') module.exports = { mode: 'development', entry: path.resolve(__dirname, 'main.js'), output: { filename: 'bundle.js', path: path.resolve(__dirname, 'dist') }, module: { rules: [ { test: /\\.css$/i, use: [MiniCssExtractPlugin.loader, 'css-loader'], } ] }, plugins: [ new MiniCssExtractPlugin({ filename: `[name].[contenthash].css` }), new HtmlWebpackPlugin({ template: path.resolve(__dirname, 'index.html') }) ] } 不要在意插件的位置，因为插件执行的顺序并不取决于数组中的位置，而是取决于侦听的钩子。 Webpack build 运行命令： webpack --config webpack.config.js 运行成功后，会生成dist目录，该目录下生成新文件bundle.js和main.9e4519333259a0e9bd53.css和index.html，打开index.html后，效果和上一个例子一致，说明css样式生效。 与之前不同的是，此时会生成一个新的index.html文件。该文件是基于template指定的文件，将js和css文件以script和link引入生成的新文件，这就是html-webpack-plugin插件的作用！ 参考文档 npm html-webpack-plugin html-webpack-plugin详解 Copyright © shiwang.wang 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-02-20 16:39:28 "},"webpack/5_devServer.html":{"url":"webpack/5_devServer.html","title":"devServer","keywords":"","body":"devServer devServer是Webpack的功能之一，可以实现： 发布文件 热更新 修改文件 修改webpack.config.js，增加一行devServer的配置： module.exports = { mode: 'development', entry: path.resolve(__dirname, 'main.js'), devServer: { open: true }, // ... } 安装webpack-dev-server插件 npm install -g webpack-dev-server Webpack build 运行命令有变化： webpack-dev-server --hot --devtool source-map 运行成功后，会自动打开页面，如下效果： 和之前有以下变化： 最直观的，页面会自动打开。 地址栏中不再是本地文件路径，而是localhost:8080。 修改show.js文件，先自动打包，然后页面会自动刷新生效。 FAQ 修改style.css文件为什么页面不会自动刷新？ 见Webpack官方文档中的解释《MiniCssExtractPlugin》 所以，如果想让css修改实时刷新，修改webpack.config.js，重新打包后生效！ const isDevMode = process.env.NODE_ENV !== 'production' // ... module.exports = { module: { rules: [ { test: /\\.css$/i, use: [ isDevMode ? 'style-loader' : MiniCssExtractPlugin.loader, 'css-loader' ], } ] }, // ... } 二者有什么不同呢？ 开发环境使用style-loader，直接将css注入到head标签内，如下图： 生成环境使用mini-css-extract-plugin，将css代码剥离。 有没有其他办法解决？ 除了上面官方的方法外，还有一种办法是改变filename。 修改webpack.config.js文件： const isDevMode = process.env.NODE_ENV !== 'production' // ... module.exports = { module: { rules: [ { test: /\\.css$/i, use: [MiniCssExtractPlugin.loader, 'css-loader'], } ], plugins: [ new MiniCssExtractPlugin({ filename: isDevMode ? `[name].css` : `[name].[contenthash].css` }), // ... ] } } 思路是，开发环境下固定住css文件的文件名。这样css文件修改后，能实现自动更新。而且不会有缓存问题，因为webpack-dev-server会自动在后追加时间戳的hash： 由此推断第一个问题的原因是css文件名hash变化，html中引用css的文件名没有及时更新。我们将filename改为cotenthash，修改css中的颜色，之后如下图： 我们发现： webpack确实侦听到变化，并且重新打包了。css文件名由main.9e4519333259a0e9bd53.css变为main.c9189b62182a414e712f.css。 页面DOM也发生变化了，首先css文件名后多了时间戳，说明更新了css文件。另外多了一个js文件main.cc05876de95eea54c5bb.hot-update.js的引用，这个文件的作用正是刷新页面。 但是为什么页面中样式没有更新？ 我们看这个main.cc05876de95eea54c5bb.hot-update.js文件内容，并未包含最新的css文件名，所以页面无法更新css样式。而问题2的解决办法正是去除hash的影响。 Copyright © shiwang.wang 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-02-22 09:15:30 "},"webpack/6_multipleEntry.html":{"url":"webpack/6_multipleEntry.html","title":"Multiple Entry","keywords":"","body":"Multiple Entry Webpack支持多入口文件的打包。多入口意味着入口文件也是多个。 修改文件 准备以下5个文件 index.html show.js function show (content) { document.getElementById('app').innerText = 'Hellow,' + content } module.exports = show main.js const show = require('./show.js') show('index') login.js const show = require('./show.js') show('login') webpack.config.js const path = require('path') var HtmlWebpackPlugin = require('html-webpack-plugin') module.exports = { mode: 'development', entry: { index: path.resolve(__dirname, 'main.js'), login: path.resolve(__dirname, 'login.js') }, plugins: [ new HtmlWebpackPlugin({ filename: 'index.html', template: path.resolve(__dirname, 'index.html'), title: 'index', chunks: ['index'] }), new HtmlWebpackPlugin({ filename: 'login.html', template: path.resolve(__dirname, 'index.html'), title: 'login', chunks: ['login'] }) ] } Webpack build 运行命令： webpack --config webpack.config.js 运行成功后，会生成dist目录，该目录下生成4个新文件：index.html、login.html、index.js、login.js。分别打开2个html文件，发现内容生效。 总结 总结以下几点 title的设置 webpack.config.js中设置title，在index.html中读取title。 chunks的作用 把webpack.config.js中2的chunks的配置删除，打包后会发生什么？ 结果打包生成的index.html和login.html中均引用了index.js和login.js。 修改chunks，如改为['index2']和['login2']为不存在的名称，会发生什么？ 结果打包生成的index.html和login.html中没有引用任何js文件。 总结一下，chunks为entry里指定的2个名称，分别为index和login。所以只能指定这2个，如不设置会引入所有的chunks。打包时，控制台会显示chunks信息： 除了entry里生成chunks，还有其他，推荐阅读《Webpack 理解 Chunk》。 Copyright © shiwang.wang 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-02-22 10:28:15 "}}